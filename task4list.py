# list
# create
a = [1, 1.1, 'a', [1], (1, 1.1), {1, 2}, {'a': 1}, None, True] # список, в котором: целое вещественное; строковое; другой список; кортеж; множество; словарь; пустой тип; булевый тип.
a = [] # пустой список
b = list() # пустой список
a = (1, 2.1, 3) # hfymit z ,sk rjhnt;tv
list(a) # [1, 2.1, 3], но 'a' остался кортежем
b = list('abc') # ['a', 'b', 'c']
# retrive
a = [1, 1.1, 'a']
print(a) # [1, 1.1, 'a']
print([1, 1.1, 'a']) # [1, 1.1, 'a']
a = [1, 1.1, 'a']
a[0] # 1
a[1] # 1.1
a[2] # 'a'
a[3] # Ошибка, вышли за границы
a[-1] # 'a'
a[-2] # 1.1
a[-3] # 1
a[-4] # ошибка, вышли за границы
a = [1, 2, 3]
a.index(3) # 2. Возвращаяет индекс, где передаваемое значение стоит в списке. В примере вернется 2, так как значение 3 в списке стоит на 2-ом индексе
# update
a = [1, 1.1, 'a']
a[0] = 'а' # теперь 'а' равно ['a', 1.1, 'a']
a[1] = 'б' # теперь 'a' равно ['a', 'б', 'a']
a[-1] = 'в' # теперь 'a' равно ['a', 'б', 'в']
a = [1, 2, 3] # теперь 'a' равно [1, 2, 3]
a = [1, 2, 3]
a.append(4) # добавляет значение (объект) в конец списка. Добавляет только один объект или значение. Теперь "а" [1, 2, 3, 4]
a.append(['a','b']) # Теперь "а" [1, 2, 3, 4, ['a', 'b']]. Не забываем, что методы в списке изменяют значение и структуру в самом списке
a = [1, 2, 3]
a.insert(0, 4) # добавляет значение, что стоит на втором месте (4) на место под индексом, что стоит на перовм месте (0). В конкретном примере доюавит 4 на 0-ой индекс, т.е. вначало. Теперь "а" [4, 1, 2, 3]
a = [1, 2, 3]
a.insert(3, 4) # в конкретном примере добавмит 4 на 3-ий индекс, т.е. вконец. Теперь "а" [1, 2, 3, 4]
a = [1, 2, 3]
a.insert(-1, 4) #  4 встанет в предпоследнее место. Теперь "а" [1, 2, 4, 3]
a = [1, 2, 3]
a.extend([4, 5, 6]) # добавляет данные в список поэлементарно. Теперь "а" [1, 2, 3, 4, 5, 6]
# delete
a = [1, 1.1, 'a']
del a[0] # теперь 'а' равно [1.1, 'a']
del a[-1] # теперь 'а' равно [1.1]
del a[-1] # теперь 'а' равно []
del a # полное удаление переменной "а"
a = [1, 2, 3]
a.clear() # полное очищает список, превращая его в пустой список. теперь "а" []
a = [1, 2, 3]
a.pop() #  возвращает последний элемент и удаояет еготиз списка. В примере вернет 3 и удалит его из списка.  теперь "а" [1, 2]
a = [1, 'ab', 3]
a.pop(1) #  возвращает элемент по указанному ИНДЕКСУ и удаляет его из  списка. В примере вернет 'ab' и удалит его из списка. теперь "а" [1, 3]. Если такого индекса нет, то возникает ошибка
a = [1, 2, 'ab']
a.remove('ab') # удаляет элемент по указанному ЗНАЧЕНИЮ из списка. Если данного значения нет, то появится ошибка. Теперь "а" [1,2]. Если такого значения нет, то появится ошибка.
a = [1, 2, 3]
b = [4, 5, 6]
c = a + b
print(c) # '[1, 2, 3, 4, 5, 6]'
a += b # Теперь "а" равно '[1, 2, 3, 4, 5, 6]'
a = [1, 2, 3] # это одномерный список
b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # это двумерный (список в списке) список. Его можно представить как: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

